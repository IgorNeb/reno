<?php
/**
* Определение кодировки документа
* @package DeltaCMS
* @subpackage Libraries
* @version 3.0
* @author Rudenko Ilya <rudenko@delta-x.com.ua>
* @copyright Copyright 2004, Delta-X ltd.
*/

class Charset 
{
		
	
	/**
	 * Таблица конвертации русских букв в эквивалентные английские
	 * @var array
	 */
	public static $rus2lat = array(
		'У' => 'Y', 'К' => 'K', 'Е' => 'E', 'Н' => 'H', 'Х' => 'X', 'В' => 'B', 
		'А' => 'A', 'Р' => 'P', 'О' => 'O', 'С' => 'C', 'М' => 'M', 'Т' => 'T'
	);
	
	/**
	* Таблица перекодировки текста в транслит
	* @var array
	*/
	public static $translit = array(
		'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'e', 'ж' => 'zh', 'з' => 'z', 'и' => 'i',
		'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't',
		'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'shch', 'ь' => '', 'ъ' => '', 'ы' => 'i',
		'э' => 'e', 'ю' => 'yu', 'я' => 'ya', 'є' => 'ye', 'ї' => 'yi', 'і' => 'i',
		
		'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E', 'Ё' => 'E', 'Ж' => 'Zh', 'З' => 'Z',
		'И' => 'I', 'Й' => 'J', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 'П' => 'P', 'Р' => 'R',
		'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'H', 'Ц' => 'Ts', 'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Shch',
		'Ъ' => '', 'Ь' => '', 'Ы' => 'I', 'Э' => 'E', 'Ю' => 'u', 'Я' => 'Ya', 'Є' => 'Ye', 'Ї' => 'Yi',  'І' => 'I'
	);
	
    /**
     * конвертации русских букв в эквивалентные английские
     * 
     * @param string $val
     * @return string
     */
	public static function rus2lat($val) 
    {
		return strtr($val, Charset::$rus2lat);
	}

    /**
     * Транслит
     * 
     * @param string $val
     * @return string
     */
	public static function translit($val)
    {
		return strtr($val, Charset::$translit);
	}
	
	
		/**
	 * Addon, translit functions 
	 * @author Barin Mikhail <barin@delta-x.ua>
	 * 
	 * Start
	 * 
	 */	

	/**
	* Транслитерационная таблица украинской и русской латиницы (УЛ и РЛ) на 1998-2000 гг.
	* @var array
	*/
	public static $tab_ul = array( 
		'ua' => array(
			'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'gh', 'ґ' => 'g',  'д' => 'd', 'е' => 'e', 'є' => 'je', 'ж' => 'zh', 'з' => 'z', 
			'и' => 'y', 'і' => 'i', 'ї' => 'ji', 'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 
			'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'c', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'shh', 
			'ю' => 'ju', 'я' => 'ja', 'ь' => 'j', 'ё' => 'jo', 'ъ' => '\'', 'ы' => 'y', 'э' => 'e',
			
			'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'Gh', 'Ґ' => 'G', 'Д' => 'D', 'Е' => 'E', 'Є' => 'Je', 'Ж' => 'Zh', 'З' => 'Z', 
			'И' => 'Y', 'І' => 'I', 'Ї' => 'Ji', 'Й' => 'J', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 'П' => 'P', 
			'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'Kh', 'Ц' => 'C', 'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Shh', 
			'Ю' => 'Ju', 'Я' => 'Ja', 'Ь' => 'J', 'Ё' => 'Jo', 'Ъ' => '\'', 'Ы' => 'Y', 'Э' => 'E'),
		'ru' => array(
			'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'ґ' => 'g',  'д' => 'd', 'е' => 'je', 'є' => 'je', 'ж' => 'zh', 'з' => 'z', 
			'и' => 'i', 'і' => 'i', 'ї' => 'ji', 'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 
			'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'c', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'shh', 
			'ю' => 'ju', 'я' => 'ja', 'ь' => 'j', 'ё' => 'jo', 'ъ' => '\'', 'ы' => 'y', 'э' => 'e',
			
			'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Ґ' => 'G', 'Д' => 'D', 'Е' => 'Je', 'Є' => 'Je', 'Ж' => 'Zh', 'З' => 'Z', 
			'И' => 'I', 'І' => 'I', 'Ї' => 'Ji', 'Й' => 'J', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 'П' => 'P', 
			'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'Kh', 'Ц' => 'C', 'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Shh', 
			'Ю' => 'Ju', 'Я' => 'Ja', 'Ь' => 'J', 'Ё' => 'Jo', 'Ъ' => '\'', 'Ы' => 'Y', 'Э' => 'E')
	);
	
	/**
	* Транслитерационная таблица кириллицы (рус-укр),  ГОСТ-16876-71 (Ст. СЭВ 1362-78) с Изменением N 2, на март 1980 г.. Пост. N 1267 от 21.03.80 (ИУС 5-80).
	* @var array
	*/
	public static $tab_ussr_gost = array(
		'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'ґ' => 'g',  'д' => 'd', 'е' => 'e', 'є' => 'je', 'ё' => 'jo', 'ж' => 'zh', 
		'з' => 'z', 'и' => 'i', 'і' => 'i', 'ї' => 'ji', 'й' => 'j', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 
		'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'c', 'ч' => 'ch', 'ш' => 'sh', 
		'щ' => 'shh', 'ъ' => '"', 'ы' => 'y', 'э' => 'eh', 'ю' => 'ju', 'я' => 'ja', 'ь' => '\'', 
		
		'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Ґ' => 'G',  'Д' => 'D', 'Е' => 'E', 'Є' => 'Je', 'Ё' => 'Jo', 'Ж' => 'Zh', 
		'З' => 'Z', 'И' => 'I', 'І' => 'I', 'Ї' => 'Ji', 'Й' => 'J', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 
		'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'Kh', 'Ц' => 'C', 'Ч' => 'Ch', 'Ш' => 'Sh', 
		'Щ' => 'Shh', 'Ъ' => '"', 'Ы' => 'Y', 'Э' => 'Eh', 'Ю' => 'Ju', 'Я' => 'Ja', 'Ь' => '\''
	);	
	
	/**
	* Дополнительная таблица транслитерации
	* @var array
	*/
	public static $tab_wide = array(
		'к' => 'c', 'ю' => 'u', 'кс' => 'x',
		'К' => 'C', 'Ю' => 'U', 'Кс' => 'X',
	);	
	
	/**
	* Нормативная таблица для воссоздания украинских собственных имен средствами английского языка. Из Протокола N2 от 19 апреля 1996 г.
	* @var array
	*/
	public static $tab_protocol = array(
		'ua' => array(
			'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'gh', 'ґ' => 'g',  'д' => 'd', 'е' => 'e', 'є' => 'ie', 'ё' => 'io', 'ж' => 'zh', 
			'з' => 'z', 'и' => 'y', 'і' => 'i', 'ї' => 'i', 'й' => 'i', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 
			'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 
			'щ' => 'sch', 'ъ' => '\'', 'ы' => 'y', 'э' => 'e', 'ю' => 'iu', 'я' => 'ia', 'ь' => '\'', 
			
			'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'H', 'Ґ' => 'G',  'Д' => 'D', 'Е' => 'E', 'Є' => 'Ye', 'Ё' => 'Yo', 'Ж' => 'Zh', 
			'З' => 'Z', 'И' => 'Y', 'І' => 'I', 'Ї' => 'Yi', 'Й' => 'Y', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 
			'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'Kh', 'Ц' => 'C', 'Ч' => 'Ch', 'Ш' => 'Sh', 
			'Щ' => 'Sch', 'Ъ' => '\'', 'Ы' => 'Y', 'Э' => 'E', 'Ю' => 'Yu', 'Я' => 'Ya', 'Ь' => '\''),
		'ru' => array(
			'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'ґ' => 'g',  'д' => 'd', 'е' => 'ie', 'є' => 'ie', 'ё' => 'io', 'ж' => 'zh', 
			'з' => 'z', 'и' => 'i', 'і' => 'i', 'ї' => 'i', 'й' => 'i', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 
			'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 
			'щ' => 'sch', 'ъ' => '\'', 'ы' => 'y', 'э' => 'e', 'ю' => 'iu', 'я' => 'ia', 'ь' => '\'', 
			
			'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'H', 'Ґ' => 'G',  'Д' => 'D', 'Е' => 'Ye', 'Є' => 'Ye', 'Ё' => 'Yo', 'Ж' => 'Zh', 
			'З' => 'Z', 'И' => 'I', 'І' => 'I', 'Ї' => 'Yi', 'Й' => 'Y', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 
			'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'Kh', 'Ц' => 'C', 'Ч' => 'Ch', 'Ш' => 'Sh', 
			'Щ' => 'Sch', 'Ъ' => '\'', 'Ы' => 'Y', 'Э' => 'E', 'Ю' => 'Yu', 'Я' => 'Ya', 'Ь' => '\'')
	);	
	
	
	/**
	* Транслитерационная таблица всех возможных значений для кириллических символов
	* @var array
	*/
	public static $tab_translit = array(
			'а' => array('a'), 'б' => array('b'), 'в' => array('v'), 'г' => array('gh','g','h'), 'ґ' => array('g'),  'д' => array('d'), 'е' => array('e','je','ie','ye'), 
			'є' => array('e','je','ie','ye'), 'ё' => array('io','o','jo','yo'), 'ж' => array('zh'), 'з' => array('z'), 'и' => array('y','i'), 'і' => array('i','y'), 
			'ї' => array('i','ji','yi'), 'й' => array('i','y','j'), 'к' => array('k'), 'л' => array('l'), 'м' => array('m'), 'н' => array('n'), 'о' => array('o'), 
			'п' => array('p'), 'р' => array('r'), 'с' => array('s'), 'т' => array('t'), 'у' => array('u'), 'ф' => array('f'), 'х' => array('kh','h'), 'ц' => array('ts','c'), 
			'ч' => array('ch'), 'ш' => array('sh'), 'щ' => array('sch','shh'), 'ъ' => array('\'',''), 'ы' => array('y','i'), 'э' => array('e','eh'), 'ю' => array('iu','u','ju','yu'), 
			'я' => array('ia','a','ja','ya'), 'ь' => array('\'',''), 
			
			'А' => array('A'), 'Б' => array('B'), 'В' => array('V'), 'Г' => array('Gh','G','H'), 'Ґ' => array('G'),  'Д' => array('D'), 'Е' => array('E','Je','Ie','Ye'), 
			'Є' => array('E','Je','Ie','Ye'), 'Ё' => array('Io','O','Jo','Yo'), 'Ж' => array('Zh'), 'З' => array('Z'), 'И' => array('Y','I'), 'І' => array('I','Y'), 
			'Ї' => array('I','Ji','Yi'), 'Й' => array('I','Y','J'), 'К' => array('K'), 'Л' => array('L'), 'М' => array('M'), 'Н' => array('N'), 'О' => array('O'), 
			'П' => array('P'), 'Р' => array('R'), 'С' => array('S'), 'Т' => array('T'), 'У' => array('U','Y'), 'Ф' => array('F'), 'Х' => array('Kh','H'), 'Ц' => array('Ts','C','Z'), 
			'Ч' => array('Ch'), 'Ш' => array('Sh'), 'Щ' => array('Sch','Shh'), 'Ъ' => array('\'',''), 'Ы' => array('Y','I'), 'Э' => array('E','Eh'), 'Ю' => array('Iu','U','Ju','Yu'),
			'Я' => array('Ia','A','Ja','Ya'), 'Ь' => array('\'','')
	);	
	
	/**
	* Транслитерирует украинский текст в соответствии с таблицей $tab_ul
	* @param string $val		
	* @param string $lang
	* @param bool $wide 		<- при true в дополнение к основной таблице накладывает транслитерационную таблицу $tab_wide
	* @return string
	*/
	public static function getTranslitByUL($val, $lang='ru', $wide=false) 
    {
		if (!$wide) { 
			return strtr($val, Charset::$tab_ul[$lang]); 
		}
		return strtr(strtr($val, Charset::$tab_wide), Charset::$tab_ul[$lang]);
	}
	
	/**
	* Транслитерирует кириллический текст в соответствии с таблицей $tab_ussr_gost
	* @param string $val	
	* @param string $lang
	* @param bool $wide 		<- при true в дополнение к основной таблице накладывает транслитерационную таблицу $tab_wide
	* @return string
	*/
	public static function getTranslitByUSSRGOST($val, $wide=false)
    {
		if (!$wide) { 
			return strtr($val, Charset::$tab_ussr_gost); 
		}
		return strtr(strtr($val, Charset::$tab_wide), Charset::$tab_ussr_gost);
	}
	
	/**
	* Транслитерирует украинский текст в соответствии с таблицей $tab_protocol
	* @param string $val	
	* @param string $lang
	* @param bool $wide 		<- при true в дополнение к основной таблице накладывает транслитерационную таблицу $tab_wide
	* @return string
	*/
	public static function getTranslitByUAProtocol($val, $lang='ru', $wide=false)
    {
		if (!$wide) { 
			return strtr($val, Charset::$tab_protocol[$lang]); 
		}
		return strtr(strtr($val, Charset::$tab_wide), Charset::$tab_protocol[$lang]);
	}
	
	/**
	* Транслитерирует украинский текст в соответствии с таблицей $tabUAProtocol и нормализирует для упрощенного варианта записи
	* @param string $val
	* @param string $lang
	* @param bool $wide 		<- при true в дополнение к основной таблице накладывает транслитерационную таблицу $tab_wide
	* @return string
	*/
	public static function getTranslitByUAProtocolSoft($val, $lang='ru', $wide=false)
    {
		$firstRule = array('ьо' => '\'o', 'ьї' => '\'i', 'ь' => '', '\'' => '', 'ъ' => '');
		$seconrRule = array('zhzh' => 'zh', 'khkh' => 'kh', 'tsts' => 'th', 'chch' => 'ch', 'shsh' => 'sh');
		
		if (!$wide) { 
			return strtr(strtr(strtr($val, $firstRule), Charset::$tab_protocol[$lang]), $seconrRule); 
		}
		return strtr(strtr(strtr(strtr($val, Charset::$tab_wide), $firstRule), Charset::$tab_protocol[$lang]), $seconrRule); 
	}
	
	/**
	* Возвращает все возможные транслитерации текста, что соответствуют государственным стандартам
	* @param string $val	
	* @return array
	*/
	public static function getTranslitStandart($val)
    {
		$res_mass = array();
			array_push($res_mass, Charset::getTranslitByUL($val));
			array_push($res_mass, Charset::getTranslitByUL($val,'ru',true));
			array_push($res_mass, Charset::getTranslitByUSSRGOST($val));
			array_push($res_mass, Charset::getTranslitByUSSRGOST($val,true));
			array_push($res_mass, Charset::getTranslitByUAProtocol($val));
			array_push($res_mass, Charset::getTranslitByUAProtocol($val,'ru',true));
			array_push($res_mass, Charset::getTranslitByUAProtocolSoft($val));
			array_push($res_mass, Charset::getTranslitByUAProtocolSoft($val,'ru',true));
		
			array_push($res_mass, Charset::getTranslitByUL($val,'ua'));
			array_push($res_mass, Charset::getTranslitByUL($val,'ua',true));
			array_push($res_mass, Charset::getTranslitByUAProtocol($val,'ua'));
			array_push($res_mass, Charset::getTranslitByUAProtocol($val,'ua',true));
			array_push($res_mass, Charset::getTranslitByUAProtocolSoft($val,'ua'));
			array_push($res_mass, Charset::getTranslitByUAProtocolSoft($val,'ua',true));
		
		return array_values(array_unique($res_mass)); 
	}
	
	/**
	* Возвращает массив всех возможных вариантов транслитераций слова, основанных на таб. $tab_translit
	* @param string $word		
	* @return array
	*/
	public static function getTranslitAll($word) 
    {
		$mass = array();
		$arr = str_split($word);
		Charset::findTranslitVariants($arr, sizeof($arr)-1, 0, $mass);
		return $mass;
	}
		
	/**
	* Вспомогательная функция. Рекурсивно перебирает все возможные транслитерации текста и заносит их в массив $mass
	* @param string $val	
	* @param int $lenght	
	* @param int $current_ch	
	* @param array $mass
	*/
	private static function findTranslitVariants($val, $lenght, $current_ch=0, &$mass=array())
    {
		$variants = Charset::$tab_translit[$val[$current_ch]];
		$next_ch = $current_ch + 1;
		for ($j=0; $j<sizeof($variants); $j++) {
			$val[$current_ch] = $variants[$j];
			if ($current_ch < $lenght) {
                Charset::findTranslitVariants($val, $lenght, $next_ch, $mass);
            } else {
                array_push($mass, implode($val));
            }
		}	
	}
		
	/**
	 * Проверяет текст на наличие украинских символов
     * 
	 * @param string $val	
	 * @return bool
	 */
	public static function isUAChars($val)
    {
		$ua_chars = array('ї' => '', 'є' => '', 'Ї' => '', 'Є' => ''); 
		$res = strtr($val,$ua_chars);
		
		if (strcmp($val, $res)) {
			return true;
		}
		return false;
	}
		
	/**
	* Проверяет текст на наличие русских символов
	* @param string $val	
	* @return bool
	*/
	public static function isRUChars($val)
    {
		$ru_chars = array('ъ' => '', 'ы' => '', 'э' => '', 'Ъ' => '', 'Ы' => '', 'Э' => ''); 
		$res = strtr($val, $ru_chars);
		
		if (strcmp($val, $res)) {
			return true;
		}
		
		return false;
	}
	
	/**
	 * End
	 */		
	
	/**
	 * Автоматическое определение кодировки, в случае, если она не возвращается сервером
	 * @version 5.0.1 усовершенствовано определение кодировки для английского текста за счет соотношения
	 * количества русских букв и латинских. (потому что при находении символов " из ворда их превращало в 
	 * русские буквы Ф)
	 * @param string $text
	 * @return mixed
	 */
    public static function detectCyrCharset($text) 
    {
	    if (strlen($text) == 0) {
            // Если убрать то в конце будет деление на ноль
            return false; 
        }
	    
		if (extension_loaded('mbstring')) {
			return mb_detect_encoding($text, CMS_DETECTION_ORDER);
		}

		// Вес нижнего и верхнего регистров
		$lowercase = 3;
		$uppercase = 1;
		
	    $charsets = Array ( 
						'KOI8-R' => 0, 
						'CP1251' => 0, 
						'CP866' => 0, 
						'ISO-8859-1' => 0, 
						'MacCyrillic' => 0 
					); 
	    for ($i = 0, $length = strlen($text); $i < $length; $i++) { 
	        $char = ord($text[$i]);
	        
	        //non-russian characters 
	        if ($char < 128 || $char > 256) continue; 
	         
	        //CP866 
	        if (($char > 159 && $char < 176) || ($char > 223 && $char < 242)) $charsets['CP866']+=$lowercase; 
	        if (($char > 127 && $char < 160)) $charsets['CP866']+=$uppercase; 
	         
	        //KOI8-R 
	        if (($char > 191 && $char < 223)) $charsets['KOI8-R']+=$lowercase; 
	        if (($char > 222 && $char < 256)) $charsets['KOI8-R']+=$uppercase; 
	         
	        //WIN-1251 
	        if ($char > 223 && $char < 256) $charsets['CP1251']+=$lowercase; 
	        if ($char > 191 && $char < 224) $charsets['CP1251']+=$uppercase; 
	         
	        //MAC 
	        if ($char > 221 && $char < 255) $charsets['MacCyrillic']+=$lowercase; 
	        if ($char > 127 && $char < 160) $charsets['MacCyrillic']+=$uppercase; 
	         
	        //ISO-8859-5 
	        if ($char > 207 && $char < 240) $charsets['ISO-8859-1']+=$lowercase; 
	        if ($char > 175 && $char < 208) $charsets['ISO-8859-1']+=$uppercase; 
	         
	    }
	    
	    // UTF-8
	    $russian_utf8 = 'Е|Й|Ц|У|К|Е|Н|Г|Ш|Щ|З|Х|Ъ|Ф|Ы|В|А|П|Р|О|Л|Д|Ж|Э|Я|Ч|С|М|И|Т|Ь|Б|Ю|ё|й|ц|у|к|е|н|г|ш|щ|з|х|ъ|ф|ы|в|а|п|р|о|л|д|ж|э|я|ч|с|м|и|т|ь|б|ю';
		$russian_utf8 = @iconv('Windows-1251', 'UTF-8//IGNORE', $russian_utf8);
		$charsets['UTF-8'] = preg_match_all('/'.$russian_utf8.'/', $text, $matches) * 5;
		
	    arsort($charsets); 
	    $result = key($charsets);
	    
	    if (100 * $charsets[$result] / strlen($text) < 10) {
	    	// Наденные символы составляют менее 10% текста, значит это английский тест с Word'a (с фигурными кавычками)
	    	return false;
	    } else {
	    	return $result;
	    }
	} 

	/**
	* Меняет кодировку страницы
	* @param string $source_charset
	* @param string $destination_charset
	* @param string $text
	* @return void
	*/
	public static function convertCharSet($source_charset, $destination_charset, $text) 
    {
		/**
		* Перекодируем текст, если необходимо
		*/
		if (!Charset::compareCharSets($destination_charset, $source_charset)) {
			// Параметр IGNORE - удаляет символы, которые он не может заменить,
			// но WARNING все равно возникает, поэтому мы его гасим
			// Например № в английском тексте вызывает WARNING
			$text = @iconv($source_charset, $destination_charset.'//IGNORE', $text);
		}
		return $text;
	}
	
	/**
	* Сверяет схожесть кодировок, с учетом их альтернативных имен
	* @param string $charset1
	* @param string $charset2
	* @return bool
	*/
	public static function compareCharSets($charset1, $charset2) 
    {
		$charset1 = strtolower($charset1);
		$charset2 = strtolower($charset2);
		
		if ($charset1 == $charset2) {
			return true;
		}
		
		/**
		* Альтернативные имена кодировок
		* @var array
		*/
		$charset_alias = array(
			'iso-8859-5' => 'iso-8859-5',
			'iso_8859-5:1988' => 'iso-8859-5',
			'iso-ir-144' => 'iso-8859-5',
			'iso_8859-5' => 'iso-8859-5',
			'cyrillic' => 'iso-8859-5',
			'iso8859-5' => 'iso-8859-5',
			'iso-8859.5' => 'iso-8859-5',
			'iso8859.5' => 'iso-8859-5',
			'iso' => 'iso-8859-5',
			
			'ibm866' => 'ibm866',
			'csibm866' => 'ibm866',
			'866' => 'ibm866',
			'cp866' => 'ibm866',
			'x-cp866' => 'ibm866',
			'x-ibm866' => 'ibm866',
			'cp-866' => 'ibm866',
			'alt' => 'ibm866',
			'dos' => 'ibm866',
			
			'windows-1251' => 'windows-1251',
			'win' => 'windows-1251',
			'x-cp1251' => 'windows-1251',
			'cp1251' => 'windows-1251',
			'cp-1251' => 'windows-1251',
			
			'koi8-r' => 'koi8-r',
			'koi-8-r' => 'koi8-r',
			'koi8' => 'koi8-r',
			'koi-8' => 'koi8-r',
			'koi' => 'koi8-r'
		);

		if (
			isset($charset_alias[$charset1])
			&& isset($charset_alias[$charset2])
			&& $charset_alias[$charset2] == $charset_alias[$charset2]
		) {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * ------------------------------------------------------------------------------------------------
	 */
	
	public static function detectCharset($text) 
    {
		$s = $text;
		$sa=self::_charset_prepare($s);
		$s1=self::charset_win_lowercase($sa);
		$r1='windows-1251';

		$c1=self::_charset_count_chars($s1);
		$b1=self::_charset_count_bad($s1);
		$p1=self::_charset_count_pairs($s1);
		$w1=$p1*32+$b1*64-$c1;

		$s2=self::charset_win_lowercase(self::_charset_koi_win($sa));
		$w2=-$c1; //Особенность кодировки koi-8r: тот же диапазон символов, что и для windows-1251
		if ($w2<$w1) {
			$b2=self::_charset_count_bad($s2);
			$w2+=64*$b2;
			if ($w2<$w1) {
				$p2=self::_charset_count_pairs($s2);
				$w2+=32*$p2;
				if ($w2<$w1) {
					$r1='koi8-r';
					$w1=$w2;
				}
			}
		}

		$s2=self::charset_win_lowercase(self::_charset_utf8_win($sa));

		$c2=self::_charset_count_chars($s2);
		$w2=-$c2;
		if ($w2<$w1) {
			$b2=self::_charset_count_bad($s2);
			$w2+=64*$b2;
			if ($w2<$w1) {
				$p2=self::_charset_count_pairs($s2);
				$w2+=32*$p2;
				if ($w2<$w1) {
					$r1='utf-8';
					$w1=$w2;
				}
			}
		}
		
		return $r1;
	}
	
	/**
	 * Вспомогательная функция для определения кодировки русского текста
	 */
	private static function _charset_prepare($s)
    {
		$r = $k = 0;
		for ($i = 0; $i<strlen($s) && $r<255; $i++) {
			if (ord($s[$i])>=0x80) {
				$r++;
				$k=$i;
			}
		}
		return substr($s,0,$k+1);
	}
	
	/**
	 * Вспомогательная функция для определения кодировки русского текста
	 */
	private static function charset_win_lowercase($s)
    {
		for($i=0; $i<strlen($s); $i++) {
			$c=ord($s[$i]);
			if ($c>=0xc0&&$c<=0xdf) {
				$s[$i]=chr($c+32);
            } elseif ($s[$i]>='A'&&$s[$i]<='Z') {
				$s[$i]=chr($c+32);
            }
		}
		return $s;
	}
	
	/**
	 * Вспомогательная функция для определения кодировки русского текста
	 * count "good" symbols in russian, in windows-1251
	 */
	private static function _charset_count_chars($s) 
    {
		$r=0;
		for($i=0; $i<strlen($s); $i++) {
			if (ord($s[$i])>=0xc0) $r++;
		}
		return $r;
	}
	
	/**
	 * Вспомогательная функция для определения кодировки русского текста
	 * count "bad" symbols in russian, in windows-1251
	 */
	private static function _charset_count_bad($s) 
    { 
		$r=0;
		for($i=0; $i<strlen($s); $i++) {
			switch($s[$i]) {
				case 'ё':
				case 'Ё':
				case '«':
				case '»':
					break;
				default:
					$c=ord($s[$i]);
					if ($c>=0x80&&$c<0xc0||$c<32) $r++;
			}
		}
		return $r;
	}
	
	/**
	 * Вспомогательная функция для определения кодировки русского текста
	 * count "bad" pairs of chars for a string in russian, in windows-1251
	 */
	private static function _charset_count_pairs($s)
	{ 
		$a=array(
			0 => 'ъыь',
			1 => 'йпфэ',
			2 => 'йфэ',
			3 => 'жйпфхцщъыьэю',
			4 => 'йфщ',
			5 => 'ъыь',
			6 => 'зйтфхшщъыэя',
			7 => 'йпфхщ',
			8 => 'ъыь',
			9 => 'абжийущъыьэюя',
			10 => 'бгйпфхщъыьэюя',
			11 => 'йрцъэ',
			12 => 'джзйъ',
			13 => 'ймпъ',
			14 => 'ъыь',
			15 => 'бвгджзйхщъэю',
			16 => 'йъэ',
			17 => 'й',
			18 => 'жй',
			19 => 'ъыь',
			20 => 'бвгджзйкпхцшщъьэюя',
			21 => 'бжзйфхцчщъыьюя',
			22 => 'бгджзйлнпрстфхцчшщъьэюя',
			23 => 'бгджзйпсфхцчщъыэюя',
			24 => 'бгджзйфхшщъыэя',
			25 => 'бвгджзйклмпстфхцчшщъыэюя',
			26 => 'абвгджзийклмнопрстуфхцчшщъыьэ',
			27 => 'аофъыьэю',
			28 => 'айлрухъыьэ',
			29 => 'абежиоуцчшщъыьэю',
			30 => 'иоуфъыьэя',
			31 => 'аоуфъыьэ'
		);
		$b=array(
			0  => 'ааабавагадаеажазаиайакаланаоасатауафахацачашащаэаюаябгбмбтбхбцбчбшбщбъбьбюбявбвжвхвъвюгзгкгтгчгядддхдэеаебегееежеиеоепесеуефецещеэеюеяжбжвжлжпжржцжчжюзззсзтзшзэзюиаиеижииийиоипиуифицишищиэиюияйпйркзкмкчкшлблвлзлнлшлщмвмгмхмчмэмюнбнвнэоаовогоеожозоиойоколомооопоуофохоцошощоэоюояпмпцрзсгсдсжсзсъсэтбтгтдтзтптштщтътэуаубувужуиуйуоуууфухуцущуюуяфлфмхгхдхкхпхсхшхэцвцмцуцычвчмчрчшшршсшчщнщрщьэвэгэдэзэйэкэмэнэпэтэфэхэяюаюбювюгюдюеюжюзюйюлюмюнюпюрюхюцюшююябягядяеяжязяияйяпяряшящяюяя',
			1  => 'ааажаоапафащаэбабббвбгбдбжбзбкблбмбнбсбтбубхбцбчбшбщбъбыбьбюбявбвввгвдвжвзвквлвмвнвпврвсвтвувхвцвчвшвщвъвьвювягагбгвгггдгегзгигкглгмгнгргсгтгугчгшгядбдвдгдддждздкдлдмдндодпдрдсдтдхдцдчдшдъдыдьдэдюеаебепеуефеэеяжбжвжгжджжжкжлжмжнжожпжржсжцжчжьжюзбзвзгздзезжзззизкзлзмзнзрзсзтзузцзчзшзъзызьзэзюзяиаиэквкдкжкзккклкмкнкскткцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщмбмвмгмкмлмммнмпмрмсмтмумфмхмцмчмшмщмымьмэмюнбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэоаооофохрбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщсбсвсгсдсжсзсмснспсрсссфсхсчсшсщсъсысьсэсютатбтвтгтдтзтитктлтмтнтптртстттутфтхтцтчтштщтътытьтэтюуоуууцущуэхгхдхехихкхлхмхнхпхрхсхтхухшхэцвцицкцмцучвчечкчлчмчнчочрчтчучшчьшвшкшлшмшншошпшршсштшушцшчшьшющощрщьъюыбыгыжыиыпырыуыцышыяьбьвьгьдьжьзькьмьньоьпьсьтьфьцьчьшьщюаюбювюгюеюжюзюйюкюмюнюпюхюцючюшющююябявягядяеяжяияйякянярясяхяцячяшяюяя',
			2  => 'аааоауафащаэбабббвбгбдбжбзбкбмбнбсбтбхбцбчбшбщбъбыбьбюбявбвввгвдвжвзвквлвмвнвпвтвувхвцвчвшвщвъвьвюгагбгвгггдгегзгигкгмгнгсгтгчгшгядбдгдддждздкдлдмдндпдсдтдхдцдчдшдъдьдэдюдяеаеиеуефеэжажбжвжгжджежжжкжлжмжнжожпжржсжужцжчжьжюзезжзззкзсзтзузцзчзшзьзэзюиуифиэквкдкжкзкккмкскткцкчкшлблвлглдлжлзлклллмлнлплслтлулфлхлчлшлщлымбмвмгмкмлмммнмпмрмсмтмумфмхмцмчмшмщмьмэмюнбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэоаофоэпкпмпнпппсптпфпцпчпшпыпьпярбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщрьрюсбсвсгсдсжсзсиснсрсссфсцсчсшсщсъсьсэтбтвтгтдтзтктлтмтнтптстттутфтхтцтчтштщтътьтэтюубувужуиуоупуууфуцуэхахвхгхдхехихкхлхмхнхпхрхсхтхухшхэцвцицкцмчвчкчлчмчнчрчтчшчьшвшкшлшмшншпшршсштшцшчшьшющащещнщощрщущьъюъяыщьбьвьгьдьжьзькьмьньоьпьфьцьчьшьщюаюбювюгюдюеюжюзюйюкюлюмюнюпюрюсютюхюцючюшющююябявягядяеяияйяпяряцячяшяюяя',
			3  => 'ааакаоафашаэбббвбгбдбжбзбибкблбмбнбобрбсбтбубхбцбчбшбщбъбыбьбюбявбвввгвдвжвзвквлвмвнвпврвсвтвувхвцвчвшвщвъвывьвювягагбгвгггдгзгкглгмгнгогргсгтгугчгшгядбдвдгдддждздидкдлдмдндпдрдсдтдудхдцдчдшдъдыдьдэдюдяеаевегежезепеуехецечешещеэзбзвзгздзезжзззизкзлзмзнзозрзсзтзузцзчзшзъзызьзэзюзяижиуифицищиэквкдкекжкзккклкмкнкркскткцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщльмбмвмгмимкмлмммнмпмрмсмтмфмхмцмчмшмщмьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщныньнэоюрбрвргрдржрзркрлрмрпрррсртрфрхрцрчршрщрьсасбсвсгсдсесжсзсислсмснспсрсссусфсхсцсчсшсщсъсысьсэсютатбтвтгтдтзтктлтмтнтптртстттфтхтцтчтштщтътытьтэувугузуиуйукуоупуууфуцуэуячвчкчлчмчнчочрчтчшчьшашвшкшлшмшншошпшршсшушцшчшьшюябявягяеяжязяияйякяляняпярясятяхяцячяшящяюяя',
			4  => 'ааазауащаэбббвбгбдбжбзбкблбмбнбсбтбубхбцбчбшбщбъбыбьбюбявбвввгвдвжвмвнвпврвсвтвхвцвчвшвщвъвьвювягбгвгггдгегзгкгмгнгсгтгугчгшгядбдгдддждздкдлдмдндпдрдсдтдхдцдчдшдъдыдьдэдюдяеуехещеэжбжвжгжджжжкжлжмжнжпжржсжцжчжьжюзбзвзгздзжзззкзлзмзрзсзтзцзчзшзъзызьзюзяигихиэквкдкжкзкккмкнкскткцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщльлюмбмвмгмкмлмммпмрмсмтмфмхмцмчмшмщмьмэмюмянбнвнгнднжнзнлнннрнснфнхнцнчншнщньнэоаофоэоюояпепкпмпнпппсптпфпцпчпшпыпьпярбрвргрдржрзркрлрмрнрпррртрфрхрцрчршрщрьсбсгсдсжсзснсрсссфсхсцсшсщсъсысьсэсюсятбтгтдтзтктлтмтнтптстттутфтхтцтчтштщтътытьтэтюудузуфхгхдхихкхлхмхнхпхрхсхтхухшхэцвцицкцмчвчкчлчмчнчочрчтчшчьшвшкшлшмшншошпшршсшцшчшьшюызыиыуыцыяьвьгьдьжьзьньоьпьсьфьцьчьшьщэгэдэзэйэлэмэпэсэтэфэхэяюаюбювюгюдюеюлюмюсютюхюцючющююябявяеяжязякяляпяряцяшяюяя',
			5  => 'аааеажазаиайаоапарасауафахацачашащаэаюаябббвбгбдбжбзбхбцбчбшбщбъвбвввгвжвпвхвщвъвюгбгвгггзгтгшдгдхдцдюеаебегедееежеиеленеоеуефещеэеюеяжбжвжжжмжчжюзсзцзшзъзэиаибидиеижииийиоириуифицичишищиэиюияйвйойхкжкзкккмкчлдлжлзлплфлхлшлщмвмрмфмхмшмэмюнжнлнфнэоаоеоиойоуочошоюояпмпппфрщсгсжсзсщсъсэсютгтдтзтптфтцтщтътэтюуауиуйуоуууфуцушущуэфмфнфсфчфыхгхкхрхтхшцвцмцучвчмчрчшшвшмшпшршцшчшющнщоэвэгэдэзэйэлэмэнэпэрэсэхэяюаюбювюгюдюеюжюзюйюкюлюмюнюпюрюхюцючюшююябягяеяжязяияйякяпяцячяшящяюяя',
			6  => 'ааабазаиаоапауафацашаэбббвбгбдбжбзбкблбмбнбрбсбтбхбцбчбшбщбъбьбюбявбвввгвдвевжвзвивквлвмвнвовпврвсвтвувхвцвчвшвщвъвывьвювягбгвгггдгегзгкгмгнгогргсгтгчгшгядбдвдгдддждздкдмдндпдрдсдтдхдцдчдшдъдэеаежеиеоеуехеэеюеяжбжвжгжджжжкжлжмжнжожпжржсжужцжчжьжюиаибиуифиэквкдкжкзккклкмкнкркскткцкчкшлблвлглдлелжлзлклллмлнлолплслтлулфлхлчлшлщлыльлюлямамбмвмгмкмлмммнмпмрмсмтмфмхмцмчмшмщмымьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэоаобоводожоиолооопотоуофохоцощоэоюояпапепипкпмпнпопппрпсптпупфпцпчпшпыпьпярбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщрырьрюрясасбсвсгсдсесжсзсислсмснсоспсрссстсусфсхсцсчсшсщсъсысьсэсюсяубувугудузумуоупуууфуцушуэцвцецицкцмцочачвчечкчлчмчнчочрчтчучшчььбьвьгьдьжьзькьмьньоьпьфьцьчьшьщюаюбювюгюдюеюжюзюйюкюмюнюпюсютюхюцючюшющюю',
			7  => 'аэбббвбгбдбжбзбкбмбнбсбтбхбцбчбшбщбъбьбюбявбвввгвдвжвзвмвпвсвтвхвцвчвшвщвъвьвюгбгвгггдгзгкгмгсгтгчгшгядбдгдддждздлдмдпдсдтдхдцдчдшдъдэдюеаегедежезеоепесеуехечещеэжбжвжгжджжжкжлжмжнжожпжржсжцжчжьжюзбзгздзезжзззизкзлзмзозсзтзузцзчзшзъзызьзэзюзяибизипифихищиэквкдкжкзккклкмкнкркскткцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщльмбмвмгмкмлмммрмсмтмфмхмцмчмшмщмьмэмюнбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщнэоаожоиоуофоцоэоюоярбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщрьрюсасбсвсгсдсесжсзсислсмснсоспсрссстсусфсхсцсчсшсщсъсысьсэсюсятатбтвтгтдтетзтктлтмтнтптртстттутфтхтцтчтштщтътытэтютяувугужуоуууфуцушуэцвцецицкцмчачвчкчлчмчнчочрчтчшчьшашвшешкшлшмшншошпшршсштшушцшчшьшюыдыжыиылыпытыуышыяьвьгьдьжьзьиькьньоьпьсьфьцьчьшьщэвэгэдэзэйэкэлэмэпэрэсэтэфэхэяюаюбювюгюдюеюжюзюйюкюлюнюпюрюсютюхюцючюшющююягядяжязякяпярясяхяцяшяюяя',
			8  => 'аааеажаиайаоауахачащаэаюбвбгбжбзбмбтбхбцбчбщбъбявбвввгвдвжвзвмвпвтвщвъвюгбгвгггкгсгчгядбдгдддлдпдхдчдшдъдьдэеаебееежеиекеоепеуефечешещеэеюеяжбжвжгжжжлжмжпжржцжчжьжюзззтзцзьзэзюиаибивигидиеижизииийикилиниоипитиуифихицичишищиэиюияйвйгйдйейзйкйлймйойрйфйхйчйшкдкжкзлблглжлзлмлнлплтлфлхлчлшлщмрмтмхмшмщмьмэмюнлнрншнщнэоеожоиойоооуофоцочошощоюояпмпфпцпчпьргрзрфрхрцрщрьсбсгсжсзсрсфсщсъсэтбтгтдтзтптфтхтштщтътюуаубувуеужузуиуйуоуруууфухуцушущуэуюуяфлфнфчхгхдхкхмхтхшхэцвцмчвчлчмчрчшшвшпшршсштшцшчшющощьэвэгэдэзэйэкэлэмэнэпэрэсэфэхэяюаюбювюгюдюеюжюзюйюкюмюрюсюхюцючюшююябягядяияйякярясяцячяшящ',
			9  => 'вбвввгвдвевжвзвивквлвмвнвпврвсвтвувхвцвчвшвщвъвывьвювягбгвгггдгегзгигкглгмгнгогргсгтгугчгшгядбдвдгдддздкдлдмдндпдрдсдхдцдчдшдъдыдьдэдюеаебевегедееежезеиейекемеоепесетеуефехецечешещеэеюеязбзвзгздзжзззизкзлзмзнзозрзсзтзузцзчзшзъзызьзэзюзяквкдкжкзкккмкнкркткцкчкшлблвлглдлжлклллмлнлплслтлфлхлчлшлщльлюлямбмвмгмкмммнмпмрмтмфмхмцмчмшмщмьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчнщньнэоаобоеожоиойоломооопосоуофохоцочошощоэоюояпапипкплпмпнпопппрпсптпупцпчпшпыпьпярарбрвргрдрержрзриркрлрмрнрпрррсртрурфрхрцрчршрщрырьрюрясвсгсдсесжсзслснспсрсссфсхсцсчсшсщсъсьсэсютбтвтгтдтзтктлтмтнтптттфтхтцтчтштщтътытьтэтютяфлфмфнфрфсфтфффчфыхвхгхдхехихкхлхмхнхохпхрхсхтхухшхэцвцицкцмчвчечкчлчмчнчочрчтчучшчьшвшкшлшмшншошпшршсштшцшчшьшю',
			10 => 'ааащаэвбвввгвдвжвзвквлвмвнвпврвсвтвхвцвчвшвщвъвьвювядадбдвдгдддедждздидкдлдмдндпдрдсдтдудхдцдчдшдъдыдьдэдюдяебегежеиеоеуефехецечешещеэеюеяжажбжвжгжджжжижкжлжмжнжожпжржсжужцжчжьжюзбзвзгздзжзззкзлзмзнзрзсзтзузцзчзшзъзызьзэзюзяигижицищиэиюквкдкжкзккклкмкнкркскткцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщмбмвмгмимкмлмммнмомпмрмсмтмумфмхмцмчмшмщмымьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэнюоаоцрбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчрщрьсбсдсжсзслсмсрсссхсчсщсъсьсэсютбтвтгтдтзтктлтмтптстттфтхтцтчтштщтътьтэтюуаугужуйуоуфуцуэцацвцкцмцоцуцычачвчичкчлчмчнчочрчтчучшчьшвшкшлшмшншошпшршсштшцшчшьшю',
			11 => 'аааоафаэбббвбгбдбжбзбкблбмбсбтбхбчбшбщбъбьбюбявбвввгвдвжвзвмвпврвтвувхвцвчвшвщвъвывьвювягбгвгггдгзгкглгмгнгсгтгчгшгядбдвдгдддждздкдлдмдпдрдтдхдцдчдшдъдьдэдяеажбжвжгжджжжкжлжмжожпжржсжужцжчжьжюзбзвзгздзжзззизмзозрзсзцзчзшзъзызьзэзюзяиуиэкдкжкзкккмкскткцкчкшлблвлглдлжлзлклллмлнлплтлфлхлчлшлщмбмвмгмкмлмммнмпмрмтмумфмхмцмчмшмщмьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнчншнщньнэнюоэоюпкплпмпнпппрпсптпфпцпчпшпьсбсвсгсдсжсзслсмснспсрсссфсхсцсчсшсщсъсысьсэсютбтвтгтдтзтитктлтмтнтптртстттфтхтцтчтштщтътьтэтютяущфифлфмфнфофрфсфтфуфффчфыхахгхдхехкхлхмхнхпхрхсхтхухшхэчвчлчмчрчтчшшашвшишкшлшмшншошпшршсштшушцшчшьшющнщощрщущьыгыдызыиырыуыцыяюаюгюеюйябяи',
			12 => 'ааабаоапауащбббвбгбдбжбзбкбмбнбсбтбхбцбчбшбщбъбьбюбявбвввгвевжвзвивквлвмвнвпврвсвтвувхвцвчвшвщвъвывьвювягагбгвгггдгегзгигкгмгогргсгтгугчгшгяеаепеуеэиаибижищиэквкдкжкзккклкмкркскткцкчкшлблвлглдлжлзлклллмлолплслтлулфлхлчлшлщлыльмбмвмгмкмлмпмрмсмтмфмхмцмчмшмщмьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэоапкпмпнпппспфпцпчпярбрвргрдржрзркрлрмрнрорпрррсртрфрхрцрчршрщрырьрюрясбсвсгсдсжсзслсмснспсрсссфсхсцсчсшсщсъсысэсютатбтвтгтдтзтктлтмтнтотптртстттутфтхтцтчтштщтътытьтэтютяубувуеуиуйуоуууцуэуяфлфмфнфрфсфтфффчфыхахвхгхдхехихкхлхмхнхпхрхсхтхухшхэцвцицкцмцочвчкчлчмчнчочрчтчшчьшашвшкшлшмшншошпшршсштшушцшчшьшющащнщощрщущьыбыдыжызыиыпырыуыцыщыяьбьвьгьжьзькьмьньоьпьфьцьчьшьщэвэгэдэзэйэкэлэмэпэсэтэфэхэяюаюбювюгюдюеюжюзюйюкюмюпюрюсютюхюцючюшющююябядяеяжязяйяпяряхяцяюяя',
			13 => 'ааафаэбббвбгбдбжбзбибкблбмбнбобрбсбтбхбцбчбшбщбъбыбьбюбявбвввгвдвжвзвквлвмвнвпврвсвтвхвцвчвшвщвъвывьвювягбгггзгкгмгнгчгшгядбдвдгдддздкдпдчдъдьдэдяещжбжвжгжджжжкжлжмжнжожпжржсжцжчжьжюзбзвзгздзжзззкзлзмзнзрзсзтзцзчзшзъзьзэзюзяиуиэкдкжкзкккмкскчкшлалблвлглдлелжлзлклллмлнлолплслтлулфлхлчлшлщлыльлюлянбнвнгнднжнзнкнлнннрнснфнхнцнчншнщньнэощрбрвргрдржрзркрлрмрнрпрррсртрурфрхрцрчршрщрырьрюрясгсдсжсзсрсхсчсшсщсъсьсэсюсятбтвтдтзтмтптттфтхтцтчтштщтътьтэубугузуиуоупуууфухуцуэфмфнфсфтфффчфыхахвхгхдхихкхлхмхнхпхсхтхухшхэцвцкцмчвчкчлчмчнчрчтчшчьшвшешкшлшмшншошпшршсшушцшчшьшющащещнщощрщущьыбыгыдыжызыиыкысыуыцыщыяьбьвьдьзьмьньпьфьцьчьщэвэгэдэзэйэкэлэмэнэрэсэтэфэхэяюбювюгюеюжюзюйюкюлюмюнюрюцябядяпяряц',
			14 => 'ааабавагадаеажаиайаламаоауафахацачашащаэаюаябцбювдвжвхвъвюгвгггзгкгсгчгшгядэдюеаебеееиереуефещеэеяжбжвжлжпжржсжчжюзсзтзцзчзшзъзэзюиаибиеижииийиоипиуифиэиюияйвйгйейзйпйрйфйхйшкдкжкмкцкчлфмвмгмхмшмщмэмюнхншнэоаовогоеожозоиойоломоуофошоэоюояпмпфпшсгсзсщсэтэтюуауеужуиуйуоуруууфуцушущуюуяфмфнфтфчхгхдхкхпхсхэцуцычмчрчшшршсшцшчщоэдэйэпэсэхэяюаюбювюгюжюйюкюлюмюнюпюрюхюцючюшягяеяияпяцячяшяюяя',
			15 => 'аааоаэеаебеиемеуефеэеяибиуифиэквкдкжкзккклкмкнкркскткцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщмамбмвмгмемкмлмммнмомпмрмсмтмумфмхмцмчмшмщмымьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэнюоапмпппрпсптпфпцпчпшпьпярбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщрьрюсбсвсгсдсжсзслсмснспсрсссфсхсцсчсшсщсъсьсэсюсятбтвтгтдтзтктлтмтнтптртстттфтхтцтчтштщтътьтэтютяувуеужуиуйумуоуууфуцуэуяфефлфмфнфофсфтфуфффчфыцацвцецкцмцочвчкчлчмчнчочрчтчучшчьшашвшкшлшмшншошпшршсштшцшчшьшюыбыдызыиыкыныпысыуыцычыяьбьвьгьдьжьзьиькьмьньоьпьсьтьфьцьчьшьщябявягядяеяжязяияйякямяняпяряцячяшяюяя',
			16 => 'аэбббвбгбдбжбзбкбмбтбхбцбчбшбщбъбыбьбявбвввгвдвжвзвквлвмвпврвсвтвхвцвчвшвщвъгбгвгггдгзгкгмгтгчгядбдвдгдддздкдлдпдрдтдхдчдшдъдьдэеэжбжвжгжжжлжмжожпжржсжчжьжюзбзвзгздзжзззмзрзсзтзузцзчзшзъзызьзэзюзяиэкдкжкзкккмкркцкчкшлблвлглдлжлклллмлнлплслтлфлхлчлшлщлюмбмвмгмкмммнмпмрмсмтмфмхмцмшмщмьмэмюнвнгнднжнзнкнлнннрнтнфнхнцнчншнщньнэпкпмпппсптпфпцпчпшпьрбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщрырьрюрясбсвсгсдсжсзслсмснсрсссфсхсцсчсшсщсъсьсэсютбтгтдтптттхтцтчтштщтътэтюувуоуууцуэфлфмфрфсфтфуфффчфыхвхгхлхрхтхшцвцкцмчвчкчмчнчочрчтчшчьшвшлшмшпшсштшцшчшьшющащнщощрщущьыиырыуыяьвьдьжьзьньоьпьфьцьчьшьщюаюбювюдюеюжюйюпюрюцююяияряц',
			17 => 'ааазаиаоащбббвбгбдбжбзбкбмбнбсбтбубхбцбчбшбщбъбьбявбвввгвдвжвзвквлвмвнвпвсвтвхвцвчвшвщвъвьвюгагбгвгггдгзгкгмгсгтгчгшгядбдгдддждздкдлдмдндпдсдтдхдцдчдшдъдыдьдэдюдяежефеэжбжвжгжджжжкжлжмжнжожпжржсжужцжчжьжюзбзвзгздзезжзззизкзлзмзнзозрзсзтзузцзчзшзъзызьзэзюзяиуищиэкдкжкзкккмкткцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщмбмвмгмкмлмммнмпмтмфмхмцмчмшмщмьмэмюнбнвнднжнзнкнлнннрнснтнфнхнцнчншнщньнэоаоэояпкпмпнпппсптпфпцпчпшпьрбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщрьрюрясбсгсдсжсзсссфсхсцсшсщсъсьсэсютдтзтптттфтхтштщтъуууцфлфмфнфрфсфтфуфффчфыхгхдхкхмхнхпхсхтхшхэцкцмцуцычвчкчмчнчочрчтчшчьшвшкшлшмшншпшршсшцшчшьшющащищнщощрщущьъюыбыдыжызыиыкыуыцычышыяьвьгьдьжьзьиьньоьпьсьфьцьчьшьщьяэвэгэдэзэйэлэпэсэтэфэхэяюаюбювюгюеюзюйюмюнюпютюхюцючющююябявяияйяляпяряшяюяя',
			18 => 'аааоаэбббвбгбдбебжбзбкбмбнбсбтбхбцбчбшбщбъбьбюбявбвввгвдвжвзвквмвнвпвсвтвхвцвчвшвщвъвьвюгбгвгггдгзгигкглгмгнгсгтгугчгшгядбдвдгдддждздкдлдмдндпдрдсдтдудхдцдчдшдъдьдэдюдяеуеэзбзгздзезжзззизкзлзмзнзрзсзтзузцзчзшзъзьзэзюзяквкдкжкзкккмкткцкчкшлблвлглдлжлклллмлнлплслтлфлхлчлшлщмбмвмгмкмлмммнмпмрмсмтмфмхмцмчмшмьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэпкпмпнпппсптпфпцпчпшпыпьпярбрвргрдржрзркрлрмрнрпрсртрфрхрцрчршрщсбсгсдсжсзспсссфсхсцсшсщсъсьсэтбтвтгтдтзтктлтмтптстттфтхтцтчтштщтътытьтэтюувууфафлфмфнфрфсфтфффчфыхгхдхехкхмхнхпхрхсхтхшхэцвцицкцмчвчкчлчмчнчочрчтчшчьшкшмшншошпшршсшцшчшьшющнщощрщущьъюъяыбыжызыиытыуыцыяьвьгьжьзьньоьпьцьчьшьщэвэгэдэзэйэлэмэпэрэсэтэфэхэяюбювюгюдюеюжюзюйюнюпюсютюхюцючющююядяеяиялярячяю',
			19 => 'ааабавагаеажаиакамаоапауафахачашащаэаюаябвбгбдбзбмбтбхбшбщбювбвввгвдвжвзвмвпврвтвувхвцвчвщвъвюгбгвгдгзгкгмгсгтгчгшгядбдгдпдхдцдчдъдэеаебегееежеиекеленеоепеуефецечещеэеюеяжвжгжмжпжржцжюзбзгзжзззтзцзшзъзэзюзяиаибивигиеижииийимиоипиуифихичишищиэиюияйгйейзйлйойпйрйфйхйцйшкдкжкзкчкшлблглжлзлмлнлплтлхлчлшлщмвмгмпмтмхмшмщмэмюнбнвнжнзнлнрнфнхнчнщнэнюняоаовогоеожоиойоломонооопоуофохоцочошощоэоюояпмпсптпфпшрзрфрхрщсбсгсдсжсзсфсхсцсчсшсщсъсэсютгтдтзтмтптфтхтцтштщтътэуаубувугудуеужузуиуйукунуоупурусутуууфухуцучушущуэуюуяфафмфнфофрфсфтфчфыхдхрхэцацвцмцоцуцычвшвшмшпшршсштшцшющрщьэвэгэдэзэйэкэмэпэфэхэяюаюбювюгюдюеюжюзюйюкюлюмюнюпюрюхюцючюшююябягядяеяжяияйякяняпярятяхяцячяшящяюяя',
			20 => 'ааадаеажаиаоапафацачащаэаюаяеаебегежезепеуефецечещеэеюивижиуифихищиэлблвлглдлжлзлклллмлнлслтлфлхлчлшлщлыльмбмвмгмимкмлмммнмпмрмсмтмфмхмцмчмшмщмьмэмюмянанбнвнгндненжнзнинкнлнннонрнснтнунфнхнцнчншнщньнэнюняоаоеожозоиооопоуофохоцочошощоэоюоярбрврдржрзркрлрмрнрпрррсртрфрхрцрчршрщрьрюрясасбсвсгсдсжсзсислсмснспсрсссусфсхсцсчсшсщсъсысьсэсюсятбтвтгтдтзтктлтмтнтптртстттфтхтцтчтштщтътэтюуаубувудуеужуиуйукулумуоупусуууфухучушущуэуяфлфмфнфрфсфтфффчфычачвчечкчлчмчнчочрчтчучшчьыбыгыдыеыжызыиыйыкылымыныпысытыуыхыцычышыщыя',
			21 => 'ааагазафацачашащвбвввгвдвевжвзвивквлвмвнвпврвсвтвувхвцвчвшвщвъвывьвювягбгвгггдгегзгигкглгмгнгргсгтгугчгшгядадбдвдгдддедждздидкдлдмдпдрдсдтдудхдцдчдшдъдыдьдэдюдяеаебегедееежезеиекелепесетеуефехецечещеэеюеяипиуифицишиэкаквкдкекжкзкиккклкмкнкскткукцкчкшлблвлглдлжлзлклллмлнлплслтлфлхлчлшлщльмбмвмгмкмлмнмпмрмсмтмфмхмцмчмшмщмьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщныньнэоиоооцошоэоюояпепипкплпмпнпппсптпупфпцпчпшпыпьпярбрвргрдржрзркрлрмрнрпрррсртрфрхрцрчршрщрырясасбсвсгсдсжсзслсмснспсрсссусфсхсцсчсшсщсъсысьсэсютбтвтгтдтзтктлтмтнтптртстттфтхтцтчтштщтътьтэтюубувугузуиуйумунуоусуууфухуцучущуэуяшашвшкшлшмшншпшршсштшушцшчшьшюэвэгэдэзэйэнэрэсэфэхэя',
			22 => 'ааабавагадажазаиайакаоасауафацачашащаэвавбвввгвдвжвзвквлвмвнвовпврвсвтвувхвцвчвшвщвъвывьвювяеаебежеиефецечешещеэеяибигижиуихицичишищиэквкдкжкзккклкмкнкркскткцкчкшмбмвмгмемимкмлмммнмомпмрмсмтмумфмхмцмчмшмщмымьмэмюмяоаободоеожозоиолонооопосотоуофохоцочошощоэоюояуаубувугудуеуиукулумуоупурусутуууфухуцучушущуэуяыбывыдыжызыиыкылынырысытыуыхыцычышыщыя',
			23 => 'ааабазаоапауафацачаэвбвввгвдвжвзвивквлвмвнвпврвсвтвхвцвчвшвщвъвьвювяеаежеоеуефецещеюибидижизиоипиуифиэквкдкжкзккклкмкнкркскткцкчкшлблвлглдлжлзлклллмлнлплслтлулфлхлчлшлщлыльлюлямбмвмгмемимкмлмммнмпмрмсмтмумфмхмцмчмшмщмьмэмюмянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэнюоаобовогодоеожозоиолоооросотоуофохоцошощоэоюоярарбрвргрдржрзриркрлрмрнрорпрррсртрурфрхрцрчршрщрырьрюрятбтвтгтдтзтктлтмтнтптртстттфтхтцтчтштщтътьтэтюуауеузуиуйукуоуууфуцучуэшвшкшлшмшншошпшршсштшцшчшьшюьбьвьгьдьжьзькьмьньоьпьфьцьчьшьщ',
			24 => 'ааазаиаоауацаэвбвввгвдвжвзвквлвмвнвовпврвсвтвувхвцвчвшвщвъвьвювяеаежеоецещеэиаигидижизиииоиуицичиэкдкжкзккклкмкнкркскткцкчкшлблвлглдлжлзлклллмлнлплслтлулфлхлчлшлщльмбмвмгмемкмлмммнмомпмрмсмтмумфмхмцмчмшмщмьмэмюнбнвнгнднжнзнкнлнннрнснфнхнцнчншнщньнэоаодожозоиооохоцочошощоэоюояпепкплпмпнпппсптпупфпцпчпшпыпьпярарбрвргрдрержрзркрлрмрнрорпрррсртрфрхрцрчршрщрырьрюрясасбсвсгсдсесжсзсислсмснсоспсрссстсусфсхсцсчсшсщсъсысьсэсюсятбтвтгтдтзтктлтмтнтптстттфтхтцтчтштщтътьтэтютяувугудужузуиукунуоупуууфухуцуэуяцацвцицкцмцоцучвчечичкчлчмчнчочрчтчучшчььбьвьгьдьеьжьзькьмьньоьпьфьцьчьшьщюаюбювюгюдюеюжюзюйюкюлюмюнюпюсюхюцючюшющюю',
			25 => 'ааабажазаиаоапарауафацачашащаэеаезеуехецещеэеюеяиаибигидижизиииоирисиуифиэиюиянбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэнюняоаоводоеожозоиойоколонооопоросотоуофохоцочошощоэоюоярарбрвргрдржрзркрлрмрнрорпрррсртрурфрхрцрчршрщрырьрюуаубувугудуеужузуиуйукулумуоуууфухуцучушуэуяьбьвьгьдьеьжьзьиькьмьньоьпьсьтьфьцьчьшьщья',
			26 => 'еаебевегеееиейенеоепетеуефецечещеэеюеяюаюбювюгюдюеюжюзюйюкюлюмюпюрюсюхюцючюшющююябягядяеяжяияйякямяпяхяцячяшящяюяя',
			27 => 'бббвбгбдбжбзбмбсбтбхбцбчбшбщбъбюбявбвввгвдвжвзвлвмвпврвсвтвхвцвщвъвьвювягбгвгггдгегзгкгмгсгтгугчгшдбдгдддждздкдмдпдсдтдхдцдчдшдъдыдьдэдюдяеаебевегееежеиейекеленеоепересетеуефецечешещеэеюеяжбжвжлжмжпжржсжужцжчжьжюзбздзжзззизкзмзрзсзцзчзшзъзьзэзюзяиаибивидиеижизииийикилиминиоипиритиуифихицичишищиэиюияйвйгйейзйкйлймйнйойрйсйфйхйцйчйшкдкжкзкккмкскткцкчлблвлглжлзлллмлнлплтлфлхлчлшлщлюмвмгмлмммнмрмтмфмхмцмшмщмьмэмюнбнвнгнднжнзнлнрнтнфнхнцншнщнэпмпппсптпфпцпшпырбргрдржрзрлрмрпрррсртрфрхрцрчрщсбсгсдсжсзснсрсссфсцсщсъсэсютбтгтдтзтмтптттфтхтцтчтштщтътэтюуаубувугуеузуиуйукулумунуоупурусутуууфухуцушущуэуюуяхгхдхкхмхпхрхсхухшхэцицкцмцоцуцычвчмчрчтчшчьшмшпшршсштшчшющащнщощрщьябягядяеяжязяияйякялямяняпярятяхяцячяшящяюяя',
			28 => 'бббвбгбдбжбзбкблбмбнбрбсбтбхбцбчбшбщбъбьбюбявбвввгвдвжвзвквлвмвнвпврвсвтвувхвцвчвшвщвъвьвювягбгвгггдгзгкглгмгнгргсгтгчгшгядбдвдгдддждздидкдлдмдндпдрдтдудхдцдчдъдыдьдэдюдяеаебееежеиеленеоеуехецечещеэеюеяжбжвжгжджжжижкжлжмжнжожпжржсжужцжчжьжюзбзгздзжзззлзмзрзсзтзцзчзшзъзэзюиаибивигидиеижизииийикилиниоиписитиуифичищиэиюияквкдкжкзкккмкркткцкчкшмбмвмгмкмлмммнмпмрмсмтмфмхмцмчмшмщмьмэмюнбнвнгнднжнзнкнлнннрнснтнфнхнцнчншнщньнэоаобовогодоеожозоиойоколомооопосоуофохоцочошощоэоюояпкплпмпнпопппрпспупфпцпчпшпыпьпясвсгсдсесжсзслсмснспсрсссфсхсцсчсшсщсъсьсэсютбтвтгтдтзтктлтмтптстттфтхтцтчтштщтътьтэтютяфефлфмфнфсфтфффчцвцкцмчвчкчлчмчнчрчтчшчьшвшкшлшмшншпшршсштшцшчшьшющнщощрщьюаюбювюгюдюеюжюйюлюмюнюпюрюхюцючюшююябядяеяжязяияйяляпясятяцячяшящяя',
			29 => 'вбвввгвдвжвзвквлвнвпвсвтвувхвцвчвшвщвъвывьвювягагбгвгггдгзгигкглгмгнгргсгтгугчгшгядбдждздкдлдндодпдрдсдтдудхдцдчдшдъдыдьдэдюдязазбзвзгздзжзззкзлзмзнзрзсзтзузцзчзшзъзызьзэзюзяйвйгйдйейзйкймйойпйрйтйхйцйчйшкдкекжккклкмкнкткцкчкшлблвлглдлжлзлклнлолплслтлфлхлчлшлщлылюлямвмгмкмлмнмрмсмтмфмхмцмчмшмщмымьмэмюмянанбнжнзнкнлнрнунфнхнчншнщныньнэнюняпапепкплпмпнпрпсптпупфпцпчпшпыпьпярбргрдржркрмрпрррфрхрцрчршрщрьрюрясасбсвсгсдсесжсзсислсмснсоспсрсссусфсцсчсшсщсъсысьсэсюсятбтвтгтдтзтлтмтптстттфтхтцтчтштщтътьтэтютяфафлфмфнфофрфсфтфуфчфыхвхгхдхехихкхлхмхпхрхсхтхухшхэябявягядяеяжязяияйялямяняпярясятяхяцячяшящяюяя',
			30 => 'ааабавагадаеажазаиайакаламаоапасатауафахацачашащаэаюаябббгбдбжбзбмбрбсбтбхбцбчбшбщбъбьбювавбвввгвдвжвзвквлвмвнвпврвсвтвувхвцвчвшвщвъвьвювягбгвгггдгзгигкглгмгнгргсгтгугчгшгядбдвдгдддздкдлдмдпдрдтдхдчдшдъдыдэдюеаебевегедееежезеиейекеленеоепересеуефехецечешещеэеюеяжбжвжгжджжжкжлжмжожпжржсжужцжчжьжюзбзвздзззкзлзмзрзсзтзцзчзшзъзьзэзюзяйвйгйдйейзйкйлйнйойпйрйсйтйфйхйцйчйшкдкжкзккклкмкркткцкчкшлалблвлглдлжлзлклмлнлолплслтлулфлхлчлшлщлымбмвмгмлмммнмпмрмсмтмумфмхмцмчмшмщмьмэмюмянбнвнднжнзнлнннрнснтнфнчншнщнэнюпаплпмпнпопппрпсптпупфпцпчпшпыпьпярбрвргрдржрзрлрмрррсртрфрхрцрчршрщрюсбсвсгсдсжсзслсмснспсрсссусфсхсцсчсшсщсъсэтбтвтгтдтзтлтмтптртттфтхтцтчтштщтътьтэтютяхвхгхдхкхлхмхпхрхсхтхшхэцацвцецкцмцоцуцычвчлчмчрчтчшшвшешишлшмшошпшршсштшцшчшьшющнщощрщьюаюбювюгюдюеюжюзюйюкюлюмюнюпюрюсюхюцючюшющюю',
			31 => 'бббвбгбдбебжбзбкбмбнбсбтбубхбцбчбшбщбъбыбюбявбвввгвдвжвзвмвпврвтвхвцвчвщвъвюгбгвгггдгзгмгргтгшгядбдвдгдддждздлдмдпдсдтдхдцдшдъдэеаебегееежезеиейеленеоепересеуефехецечещеэеюеяжвжгжджжжлжмжожпжржсжцжчжьжюзбздзжзззмзрзсзтзцзшзъзэзюиаибивигидиеижииийикилимиоипириситиуифихишищиэиюияйвйгйдйейзйлймйнйойпйрйфйхйчйшквкдкжкзкккмкркткцкчлблвлглдлелжлзлллмлнлплфлхлчлшлщлямвмгмммнмрмтмфмхмчмшмэмюмянбнжнзнлнрнтнфнхншнэплпмпппрпсптпфпцпшпьпярбрвргржрзрпррртрфрхрцршрщрьрюрясбсвсгсдсжсзсмспсрсссфсхсцсчсшсщсъсэсютбтгтдтзтлтмтптртттфтхтцтчтштщтътэтютяхвхгхдхехкхмхохрхсхухшхэцвцмцоцучвчлчмчрчтчшшашвшмшошпшршсштшушцшчшьшющощрщьюаюбювюгюдюеюжюзюйюкюлюмюнюпюрюхюцючюшююябявягядяеяжязяияйякяляняпярятяхяцячяшящяюяя',
		);
		$res=0;
		for($i=0;$i<strlen($s)-1;$i++) {
			$c1=$s[$i];
			if ($c1<'а'||$c1>'я') continue;
			$c2=$s[$i+1];
			if ($c2<'а'||$c2>'я') continue;
			$i1=ord($c1)-ord('а');
			if (strpos($a[$i1],$c2)!==false) {
				$res++;
				continue;
			}
			if ($i>=strlen($s)-2) continue;
			$c3=$s[$i+2];
			if ($c3<'а'||$c3>'я') continue;
			$i2=ord($c2)-ord('а');
			if (strpos($a[$i2],$c3)!==false) {
				$res++;
				$i++;
				continue;
			}
			$l=0;
			$r=strlen($b[$i1])/2-1;
			while($l<=$r) {
				$c=$l+(($r-$l)>>1);
				$ca=$b[$i1][$c*2];
				$cb=$b[$i1][$c*2+1];
				if ($ca==$c2&&$cb==$c3) {
					$res++;
					break;
				}
				if ($ca<$c2||$ca==$c2&&$cb<$c3)
					$l=$c+1;
				else
					$r=$c-1;
			}
		}
		return $res;
	}
	
	/**
	 * Вспомогательная функция
	 */
	private static function _charset_alt_win($s)
    {
		for($i=0;$i<strlen($s);$i++) {
			$c=ord($s[$i]);
			if ($c>=0x80&&$c<=0x9f) $s[$i]=chr($c-0x80+0xc0);
			elseif ($c>=0xa0&&$c<=0xaf) $s[$i]=chr($c-0xa0+0xe0);
			elseif ($c>=0xc0&&$c<=0xdf) $s[$i]=chr($c-0xc0+0x80);
			elseif ($c>=0xf0&&$c<=0xff) $s[$i]=chr($c-0xf0+0xa0);
		}
		return $s;
	}
	
	/**
	 * Вспомогательня функция
	 */
	private static function _charset_koi_win($s) 
    {
		$kw = array(
			//00   01   02   03   04   05   06   07   08   09   0a    0b   0c    0d   0e   0f
			0x80, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,  139, 140,  141, 142, 143, //0x80 - 0x8f
			144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 0xbb, 156, 0xab, 158, 159, //0x90 - 0x9f
			160, 161, 162, 184, 164, 165, 166, 167, 168, 169, 170,  171, 172,  173, 174, 175, //0xa0 - 0xaf
			176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,  187, 188,  189, 190, 191, //0xb0 - 0xbf
			254, 224, 225, 246, 228, 229, 244, 227, 245, 232, 233,  234, 235,  236, 237, 238, //0xc0 - 0xcf
			239, 255, 240, 241, 242, 243, 230, 226, 252, 251, 231,  248, 253,  249, 247, 250, //0xd0 - 0xdf
			222, 192, 193, 214, 196, 197, 212, 195, 213, 200, 201,  202, 203,  204, 205, 206, //0xe0 - 0xef
			207, 223, 208, 209, 210, 211, 198, 194, 220, 219, 199,  216, 221,  217, 215, 218  //0xf0 - 0xff
		);
		for($i=0;$i<strlen($s);$i++) {
			$c=ord($s[$i]);
			if ($c>=128)
				$s[$i]=chr($kw[$c-128]);
		}
		return $s;
	}
	
	/**
	 * Вспомогательная функция
	 */
	private static function _charset_utf8_win($s)
    {
		$r='';
		$state=1;
		for ($i=0;$i<strlen($s);$i++) {
			$c=ord($s[$i]);
			switch($state) {
				case 1: //not a special symbol
				if ($c<=127) {
					$r.=$s[$i];
				} else {
					if (($c>>5)==6) {
						$c1=$c;
						$state=2;
					} else $r.=chr(128);
				}
				break;
				case 2: //an utf-8 encoded symbol has been meet
				$new_c2=($c1&3)*64+($c&63);
				$new_c1=($c1>>2)&5;
				$new_i=$new_c1*256+$new_c2;
				switch($new_i) {
					case   1025: $out_c='Ё'; break;
					case   1105: $out_c='ё'; break;
					case 0x00ab: $out_c='«'; break;
					case 0x00bb: $out_c='»'; break;
					default: $out_c=chr($new_i-848);
				}
				$r.=$out_c;
				$state=1;
				break;
			}
		}
		return $r;
	}
    
}
?>